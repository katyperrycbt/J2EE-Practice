/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.64
 * Generated at: 2021-04-22 08:33:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.nio.charset.StandardCharsets;
import java.security.spec.KeySpec;
import java.util.Base64;

public final class RepeatVisitor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.crypto");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.crypto.spec");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.security.spec.KeySpec");
    _jspx_imports_classes.add("java.util.Base64");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>LAB 5</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("\tfont-family: Arial, Helvetica, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Full-width input fields */\r\n");
      out.write("input[type=text], input[type=password] {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\tpadding: 12px 20px;\r\n");
      out.write("\tmargin: 8px 0;\r\n");
      out.write("\tdisplay: inline-block;\r\n");
      out.write("\tborder: 1px solid #ccc;\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Set a style for all buttons */\r\n");
      out.write("button {\r\n");
      out.write("\tbackground-color: #4CAF50;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tpadding: 14px 20px;\r\n");
      out.write("\tmargin: 8px 0;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("button:hover {\r\n");
      out.write("\topacity: 0.8;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Extra styles for the cancel button */\r\n");
      out.write(".cancelbtn {\r\n");
      out.write("\twidth: auto;\r\n");
      out.write("\tpadding: 10px 18px;\r\n");
      out.write("\tbackground-color: #f44336;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Center the image and position the close button */\r\n");
      out.write(".imgcontainer {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tmargin: 24px 0 12px 0;\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("img.avatar {\r\n");
      out.write("\twidth: 40%;\r\n");
      out.write("\tborder-radius: 50%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("\tpadding: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("span.psw {\r\n");
      out.write("\tfloat: right;\r\n");
      out.write("\tpadding-top: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* The Modal (background) */\r\n");
      out.write(".modal {\r\n");
      out.write("\tdisplay: none; /* Hidden by default */\r\n");
      out.write("\tposition: fixed; /* Stay in place */\r\n");
      out.write("\tz-index: 1; /* Sit on top */\r\n");
      out.write("\tleft: 0;\r\n");
      out.write("\ttop: 0;\r\n");
      out.write("\twidth: 100%; /* Full width */\r\n");
      out.write("\theight: 100%; /* Full height */\r\n");
      out.write("\toverflow: auto; /* Enable scroll if needed */\r\n");
      out.write("\tbackground-color: rgb(0, 0, 0); /* Fallback color */\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\r\n");
      out.write("\tpadding-top: 60px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Modal Content/Box */\r\n");
      out.write(".modal-content {\r\n");
      out.write("\tbackground-color: #fefefe;\r\n");
      out.write("\tmargin: 5% auto 15% auto;\r\n");
      out.write("\t/* 5% from the top, 15% from the bottom and centered */\r\n");
      out.write("\tborder: 1px solid #888;\r\n");
      out.write("\twidth: 500px; /* Could be more or less, depending on screen size */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* The Close Button (x) */\r\n");
      out.write(".close {\r\n");
      out.write("\tposition: absolute;\r\n");
      out.write("\tright: 25px;\r\n");
      out.write("\ttop: 0;\r\n");
      out.write("\tcolor: #000;\r\n");
      out.write("\tfont-size: 35px;\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".close:hover, .close:focus {\r\n");
      out.write("\tcolor: red;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Add Zoom Animation */\r\n");
      out.write(".animate {\r\n");
      out.write("\t-webkit-animation: animatezoom 0.6s;\r\n");
      out.write("\tanimation: animatezoom 0.6s\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@\r\n");
      out.write("-webkit-keyframes animatezoom {\r\n");
      out.write("\tfrom {-webkit-transform: scale(0)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("to {\r\n");
      out.write("\t-webkit-transform: scale(1)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("@\r\n");
      out.write("keyframes animatezoom {\r\n");
      out.write("\tfrom {transform: scale(0)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("to {\r\n");
      out.write("\ttransform: scale(1)\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Change styles for span and cancel button on extra small screens */\r\n");
      out.write("@media screen and (max-width: 300px) {\r\n");
      out.write("\tspan.psw {\r\n");
      out.write("\t\tdisplay: block;\r\n");
      out.write("\t\tfloat: none;\r\n");
      out.write("\t}\r\n");
      out.write("\t.cancelbtn {\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>Exercise 1</h2>\r\n");
      out.write("\t");

	Cookie[] cookies = request.getCookies();
	//boolean isMyCookieExist = false;

	if (cookies != null) {
		for (int i = 0; i < cookies.length; i++) {
			Cookie temp = cookies[i];
			if (temp.getName().equals("myCookie")) {
		out.println("<h1>Welcome Back!</h1>");
		temp.setValue(String.valueOf((Integer.parseInt(temp.getValue()) + 1)));
		out.println("<h1>You visited this page for " + temp.getValue() + " times</h1>");
		temp.setPath("/Web-Lab5");
		response.addCookie(temp);
		break;
			}
			if (i == cookies.length - 1) {
		out.println("<h1>Welcome Aboard!</h1>");
			}
		}
	} else {
		out.println("<h1>Welcome Aboard!</h1>");
		out.println("<h1>You visited this page for 1 times</h1>");
		Cookie newCookie = new Cookie("myCookie", "1");
		newCookie.setMaxAge(60 * 60 * 24);
		newCookie.setPath("/Web-Lab5");
		response.addCookie(newCookie);
	}
	
      out.write("\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<h2>Exercise 2</h2>\r\n");
      out.write("\t");

	HttpSession mySession = request.getSession();
	Integer accessCount = (Integer) session.getAttribute("mySession");

	if (accessCount == null) {
		accessCount = new Integer(0);
	} else {
		accessCount = new Integer(accessCount.intValue() + 1);
	}

	out.print("<CENTER>\n" + "<H2>Information on Your Session:</H2>\n" + "<TABLE BORDER=1>\n" + "<TR BGCOLOR=\"#FFAD00\">\n"
			+ "  <TH>Info Type<TH>Value\n" + "<TR>\n" + "  <TD>ID\n" + "  <TD>" + session.getId() + "\n" + "<TR>\n"
			+ "  <TD>Creation Time\n" + "  <TD>" + new Date(session.getCreationTime()) + "\n" + "<TR>\n"
			+ "  <TD>Time of Last Access\n" + "  <TD>" + new Date(session.getLastAccessedTime()) + "\n" + "<TR>\n"
			+ "  <TD>Number of Previous Accesses\n" + "  <TD>" + accessCount + "\n" + "</TABLE>\n" + "</CENTER>");

	mySession.setAttribute("mySession", accessCount);
	
      out.write("\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<h2>Exercise 3, 4 and 5 all together</h2>\r\n");
      out.write("\t");

	cookies = request.getCookies();

	if (cookies != null) {
		for (int i = 0; i < cookies.length; i++) {
			Cookie temp = cookies[i];
			if (temp.getName().equals("loginCookie")) {
		out.println("<div id=\"id01\" class=\"modal\">" +

				"<form class=\"modal-content animate\" action=\"RepeatVisitor.jsp\"" + "method=\"post\">"
				+ "<h4 class=\"container\">You have logged in before! No action required!</h4>" 
						+ "<div class=\"imgcontainer\">"
						+ "<span onclick=\"document.getElementById('id01').style.display='none'\""
						+ "class=\"close\" title=\"Close Modal\">&times;</span> <img"
						+ "src=\"https://res.cloudinary.com/katyperrycbt/image/upload/v1618995331/qd1kcma84gi0ptsehgdq.png\""
						+ "alt=\"Avatar\" class=\"avatar\">" + "</div>" 
				+ "</form>" + "</div>");
		break;
			}
			if (i == cookies.length - 1) {
		out.println("<div id=\"id01\" class=\"modal\">" +

				"<form class=\"modal-content animate\" action=\"RepeatVisitor.jsp\"" + "method=\"post\">"
				+ "<div class=\"imgcontainer\">"
				+ "<span onclick=\"document.getElementById('id01').style.display='none'\""
				+ "class=\"close\" title=\"Close Modal\">&times;</span> <img"
				+ "src=\"https://res.cloudinary.com/katyperrycbt/image/upload/v1618995331/qd1kcma84gi0ptsehgdq.png\""
				+ "alt=\"Avatar\" class=\"avatar\">" + "</div>" +

				"<div class=\"container\">" + "<label for=\"uname\"><b>Username</b></label> <input type=\"text\""
				+ "placeholder=\"Enter Username\" name=\"uname\" required> <label"
				+ "for=\"psw\"><b>Password</b></label> <input type=\"password\""
				+ "placeholder=\"Enter Password\" name=\"psw\" required>" +

				"<button type=\"submit\">Login</button>" + "<label> <input type=\"checkbox\" checked=\"checked\""
				+ "name=\"remember\"> Remember me" + "</label>" + "</div>" +

				"<div class=\"container\" style=\"background-color: #f1f1f1\">" + "<button type=\"button\""
				+ "onclick=\"document.getElementById('id01').style.display='none'\""
				+ "class=\"cancelbtn\">Cancel</button>"
				+ "<span class=\"psw\">Forgot <a href=\"#\">password?</a></span>" + "</div>" + "</form>"
				+ "</div>");
			}
		}
	} else {
		out.println("<h1>Welcome Aboard!</h1>");
		out.println("<h1>Please Login</h1>");
		out.println("<div id=\"id01\" class=\"modal\">" +

		"<form class=\"modal-content animate\" action=\"RepeatVisitor.jsp\"" + "method=\"post\">"
		+ "<div class=\"imgcontainer\">" + "<span onclick=\"document.getElementById('id01').style.display='none'\""
		+ "class=\"close\" title=\"Close Modal\">&times;</span> <img"
		+ "src=\"https://res.cloudinary.com/katyperrycbt/image/upload/v1618995331/qd1kcma84gi0ptsehgdq.png\""
		+ "alt=\"Avatar\" class=\"avatar\">" + "</div>" +

		"<div class=\"container\">" + "<label for=\"uname\"><b>Username</b></label> <input type=\"text\""
		+ "placeholder=\"Enter Username\" name=\"uname\" required> <label"
		+ "for=\"psw\"><b>Password</b></label> <input type=\"password\""
		+ "placeholder=\"Enter Password\" name=\"psw\" required>" +

		"<button type=\"submit\">Login</button>" + "<label> <input type=\"checkbox\" checked=\"checked\""
		+ "name=\"remember\"> Remember me" + "</label>" + "</div>" +

		"<div class=\"container\" style=\"background-color: #f1f1f1\">" + "<button type=\"button\""
		+ "onclick=\"document.getElementById('id01').style.display='none'\"" + "class=\"cancelbtn\">Cancel</button>"
		+ "<span class=\"psw\">Forgot <a href=\"#\">password?</a></span>" + "</div>" + "</form>" + "</div>");
	}
	
      out.write("\r\n");
      out.write("\t<button onclick=\"document.getElementById('id01').style.display='block'\"\r\n");
      out.write("\t\tstyle=\"width: auto;\">Click to open login form</button>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// Get the modal\r\n");
      out.write("\t\tvar modal = document.getElementById('id01');\r\n");
      out.write("\r\n");
      out.write("\t\t// When the user clicks anywhere outside of the modal, close it\r\n");
      out.write("\t\twindow.onclick = function(event) {\r\n");
      out.write("\t\t\tif (event.target == modal) {\r\n");
      out.write("\t\t\t\tmodal.style.display = \"none\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\t");

	String username = request.getParameter("uname");
	String password = request.getParameter("psw");
	boolean remember = request.getParameter("remember") != null;

	if (remember) {
		String SECRET_KEY = "my_super_secret_key";
		String SALT = "ssshhhhhhhhhhh!!!!";
		try {
			byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			IvParameterSpec ivspec = new IvParameterSpec(iv);

			SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
			KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALT.getBytes(), 65536, 256);
			SecretKey tmp = factory.generateSecret(spec);
			SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
			String encodedString = Base64.getEncoder().encodeToString(cipher.doFinal((username + password + new Date()).getBytes(StandardCharsets.UTF_8)));
			Cookie newCookie = new Cookie("loginCookie", encodedString);
			newCookie.setMaxAge(60 * 60 * 24);
			newCookie.setPath("/Web-Lab5");
			response.addCookie(newCookie);
		} catch (Exception e) {
			System.out.println("Error while encrypting: " + e.toString());
		}
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
