/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.64
 * Generated at: 2021-05-13 09:12:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class Register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Register Course</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h2>Register courses</h2>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<h4>Available courses</h4>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		String OOP = (request.getParameter("course0") != null && !request.getParameter("course0").isEmpty()) ? request.getParameter("course0") : null;
		String OOAD = (request.getParameter("course1") != null && !request.getParameter("course1").isEmpty()) ? request.getParameter("course1") : null;
		String Web = (request.getParameter("course2") != null && !request.getParameter("course2").isEmpty()) ? request.getParameter("course2") : null;
		
		Cookie[] cookiess = request.getCookies();
		//boolean isMyCookieExist = false;
		String username = "";
		if (cookiess != null) {
			for (int i = 0; i < cookiess.length; i++) {
				Cookie temp = cookiess[i];
				if (temp.getName().equals("logininfo")) {
					username = temp.getValue();
					
				}
			}
		}
		
		if (OOP != null) {
			if (OOP.indexOf("s") == OOP.length() - 1) {
				String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
				Connection connection = null; //step 3
				Statement statementa = null; //step 4
				OOP = OOP.substring(0, OOP.length() - 1) + OOP.substring(OOP.length());

				try {
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					connection = DriverManager.getConnection(connectionURL, "root", "admin");
					statementa = connection.createStatement();
					statementa.executeUpdate("DELETE FROM studentcourse WHERE StudentID = "+username+" AND CourseID = " + OOP); //step 5
				} catch (SQLException e) {
					out.println("SQLException caught: " + e.getMessage());
				} finally {
				}
			} else {
				String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
				Connection connection = null; //step 3
				Statement statementb = null; //step 4
				try {
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					connection = DriverManager.getConnection(connectionURL, "root", "admin");
					statementb = connection.createStatement();
					statementb.executeUpdate("INSERT INTO studentcourse VALUES ("+username+", "+ OOP +")"); //step 5
				} catch (SQLException e) {
					out.println("SQLException caught: " + e.getMessage());
				} finally {
				}
			}
		}
		
		if (OOAD != null) {
			if (OOAD.indexOf("s") == OOAD.length() - 1) {
				String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
				Connection connection = null; //step 3
				Statement statement = null; //step 4
				OOAD = OOAD.substring(0, OOAD.length() - 1) + OOAD.substring(OOAD.length());

				try {
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					connection = DriverManager.getConnection(connectionURL, "root", "admin");
					statement = connection.createStatement();
					statement.executeUpdate("DELETE FROM studentcourse WHERE StudentID = "+username+" AND CourseID = " + OOAD); //step 5
				} catch (SQLException e) {
					out.println("SQLException caught: " + e.getMessage());
				} finally {
					
				}
			} else {
				String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
				Connection connection = null; //step 3
				Statement statement = null; //step 4
				ResultSet rs = null;
				
				try {
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					connection = DriverManager.getConnection(connectionURL, "root", "admin");
					statement = connection.createStatement();
					statement.executeUpdate("INSERT INTO studentcourse VALUES ("+username+", "+ OOAD +")"); //step 5
				} catch (SQLException e) {
					out.println("SQLException caught: " + e.getMessage());
				} finally {
				}
			}
		}
		
		if (Web != null) {
			if (OOP.indexOf("s") == OOP.length() - 1) {
				String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
				Connection connection = null; //step 3
				Statement statement = null; //step 4
				ResultSet rs = null;
				Web = Web.substring(0, Web.length() - 1) + Web.substring(Web.length());

				try {
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					connection = DriverManager.getConnection(connectionURL, "root", "admin");
					statement = connection.createStatement();
					statement.executeUpdate("DELETE FROM studentcourse WHERE StudentID = "+username+" AND CourseID = " + Web); //step 5
				} catch (SQLException e) {
					out.println("SQLException caught: " + e.getMessage());
				} finally {
				}
			} else {
				String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
				Connection connection = null; //step 3
				Statement statement = null; //step 4
				ResultSet rs = null;
				
				try {
					Class.forName("com.mysql.jdbc.Driver").newInstance();
					connection = DriverManager.getConnection(connectionURL, "root", "admin");
					statement = connection.createStatement();
					statement.executeUpdate("INSERT INTO studentcourse VALUES ("+username+", "+ Web +")"); //step 5
				} catch (SQLException e) {
					out.println("SQLException caught: " + e.getMessage());
				} finally {
				}
			}
		}
	
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t");

	Cookie[] cookies = request.getCookies();
	//boolean isMyCookieExist = false;

	if (cookies != null) {
		for (int i = 0; i < cookies.length; i++) {
			Cookie temp = cookies[i];
			if (temp.getName().equals("logininfo")) {
		String studentID = "";
		String studentName = "";

		String connectionURL = "jdbc:mysql://localhost:3307/nodejs"; //step 2
		Connection connection = null; //step 3
		Statement statement = null; //step 4
		Statement statement2 = null; //step 4
		ResultSet rs = null;
		ResultSet rs1 = null;

		try {
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			connection = DriverManager.getConnection(connectionURL, "root", "admin");
			statement = connection.createStatement();
			statement2 = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			rs = statement.executeQuery("SELECT * FROM course"); //step 5
			rs1 = statement2.executeQuery("SELECT * FROM studentcourse, course WHERE studentcourse.StudentID = "
					+ temp.getValue() + " AND studentcourse.CourseID = course.CourseID"); //step 5
			int iterID = 0;

			out.println("<form method=\"POST\" action=\"Register.jsp\">" + "	<table>");
			while (rs.next()) {
				boolean checked = false;
				rs1.beforeFirst();
				while (rs1.next()) {
					if (rs1.getString("CourseID").equals(rs.getString("CourseID"))) {
						checked = true;
						break;
					}

				}
				out.println("		<tr>" + "			<th><label for=\"courseID" + (iterID) + "\">Course ID: "
						+ rs.getString("CourseID") + " Course Name: " + rs.getString("CourseName") + "</label></th>"
						+ "			<td><input " + (checked ? "checked" : "")
						+ " type=\"checkbox\" name=\"course"+iterID+"\" value=\""+rs.getString("CourseID")+ (checked ? "s" : "")+"\" id=\"courseID" + (iterID++) + "\" /></td>"
						+ "		</tr>");
			} //step 6

			out.println("		<tr>" + "			<th><label for=\"submit\">Save</label></th>"
					+ "			<td><input type=\"submit\" value=\"Save\" id=\"submit\" /></td>" + "		</tr>"
					+ "	</table>" + "</form>");
			rs.close(); //step 7
			rs1.close();
		} catch (SQLException e) {
			out.println("SQLException caught: " + e.getMessage());
		} finally {
		}
		break;
			}
			if (i == cookies.length - 1) {
		response.sendRedirect("Login.jsp");
			}
		}
	}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
